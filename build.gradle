import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()

    maven {
        url 'https://jitpack.io'
    }
    maven {
        url "https://maven.terraformersmc.com/"
    }
    maven {
        url "https://maven.shedaniel.me/"
    }
    maven {
        url "https://maven.nucleoid.xyz/"
    }
    maven {
        url "https://maven.siphalor.de/"
    }
    maven {
        url "https://repo.spring.io/milestone"
    }
    maven {
        url 'https://repo.spring.io/libs-snapshot'
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modImplementation include(fabricApi.module("fabric-api-base", project.fabric_version))
    modImplementation include(fabricApi.module("fabric-command-api-v2", project.fabric_version))

    modImplementation include("net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}")

    modImplementation include("com.gitlab.Lortseam.completeconfig:base:2.0.0")
    modImplementation include("eu.pb4:placeholder-api:2.0.0-beta.7+1.19")

    // External libraries to bundle with JAR
    modImplementation include(shadow('dev.kord:kord-core:0.8.0-M16'))
    shadow 'com.vdurmont:emoji-java:5.1.1'
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier.set("shadow")

    exclude("kotlin/**", "kotlinx/coroutines/**", "kotlinx/serialization/**", "javax/**", "META-INF")
    exclude("org/checkerframework/**", "org/intellij/**", "org/jetbrains/annotations/**")
    exclude("com/google/gson/**")
    exclude("org/slf4j/**")
    exclude("org/bouncycastle/**")
    exclude("com/codahale/**")
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

remapJar {
    dependsOn shadowJar
    from zipTree(shadowJar.archivePath)
}

artifacts {
    archives shadowJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

compileKotlin.kotlinOptions.jvmTarget = "17"